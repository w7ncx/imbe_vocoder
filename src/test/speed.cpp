#include "imbe_vocoder.h"

#include <cstdio>
#include <cstdint>

#include <ctime>

int16_t data1[24U][8U] = {
	{0x0015, 0x0F02, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0009},
	{0x00D6, 0x0F40, 0x0402, 0x0008, 0x0000, 0x0100, 0x0000, 0x000B},
	{0x0157, 0x0C64, 0x0020, 0x0080, 0x0001, 0x0400, 0x0000, 0x000F},
	{0x0256, 0x07C0, 0x03F1, 0x0467, 0x0008, 0x061B, 0x0302, 0x0071},
	{0x0295, 0x0FF1, 0x05A2, 0x094F, 0x0014, 0x0299, 0x01CA, 0x0051},
	{0x02DF, 0x0BFA, 0x0AB5, 0x0FE5, 0x0406, 0x0040, 0x01E2, 0x0033},
	{0x029F, 0x0F90, 0x0382, 0x0998, 0x0415, 0x0675, 0x04AF, 0x0013},
	{0x031F, 0x06C4, 0x0D4D, 0x0B79, 0x060C, 0x03B7, 0x01CF, 0x001B},
	{0x0327, 0x06C4, 0x08C4, 0x0A44, 0x060B, 0x0303, 0x00A6, 0x0039},
	{0x03AF, 0x00D8, 0x0C89, 0x0F1F, 0x0701, 0x078E, 0x07E5, 0x0011},
	{0x03ED, 0x05F5, 0x0438, 0x0C4B, 0x0780, 0x0194, 0x05B6, 0x005B},
	{0x042D, 0x0751, 0x079C, 0x035D, 0x0781, 0x0509, 0x01F9, 0x0064},
	{0x04A7, 0x023A, 0x09CE, 0x07F6, 0x0782, 0x0696, 0x0116, 0x007A},
	{0x0525, 0x0778, 0x0E2D, 0x033B, 0x0782, 0x042E, 0x01A3, 0x0037},
	{0x05E7, 0x097E, 0x0D53, 0x0D6B, 0x0780, 0x02B1, 0x06CE, 0x0079},
	{0x065E, 0x07EB, 0x029D, 0x0FB9, 0x0600, 0x02F8, 0x055E, 0x0074},
	{0x065E, 0x0793, 0x0FA6, 0x0EFC, 0x0600, 0x009C, 0x04FC, 0x0062},
	{0x0656, 0x07E6, 0x0886, 0x0BB6, 0x0600, 0x06B6, 0x04CA, 0x0038},
	{0x0695, 0x0FD3, 0x05B9, 0x0F90, 0x0600, 0x068A, 0x03BC, 0x0038},
	{0x0695, 0x0F30, 0x074B, 0x05C6, 0x0600, 0x0742, 0x07AF, 0x0050},
	{0x0656, 0x07F8, 0x064C, 0x0F22, 0x0400, 0x04B4, 0x045D, 0x007F},
	{0x0492, 0x01F6, 0x02D9, 0x0553, 0x0001, 0x067D, 0x03B2, 0x0055},
	{0x0312, 0x01CB, 0x07DA, 0x0E7E, 0x0003, 0x029B, 0x0361, 0x003F},
	{0x0216, 0x00BC, 0x0DB3, 0x063C, 0x0006, 0x0602, 0x0360, 0x000B}
};

int main()
{
	imbe_vocoder imbe;
	int16_t audio[160U];
	int16_t data2[8U];

	long decodeMS = 0L;
	long encodeMS = 0L;

	for (uint8_t i = 0U; i < 24U; i++) {
		timespec startTS;
		::clock_gettime(CLOCK_MONOTONIC, &startTS);

		imbe.imbe_decode(data1[i], audio);

		timespec decodeTS;
		::clock_gettime(CLOCK_MONOTONIC, &decodeTS);

		imbe.imbe_encode(data2, audio);

		timespec encodeTS;
		::clock_gettime(CLOCK_MONOTONIC, &encodeTS);

		if (decodeTS.tv_sec != startTS.tv_sec) {
			decodeMS += (1000000000L + decodeTS.tv_nsec - startTS.tv_nsec) / 1000000L;
		} else {
			decodeMS += (decodeTS.tv_nsec - startTS.tv_nsec) / 1000000L;
		}

		if (decodeTS.tv_sec != encodeTS.tv_sec) {
			encodeMS += (1000000000L + encodeTS.tv_nsec - decodeTS.tv_nsec) / 1000000L;
		} else {
			encodeMS += (encodeTS.tv_nsec - decodeTS.tv_nsec) / 1000000L;
		}
	}

	::printf("Decode = %ld ms, Encode=%ld ms\n", decodeMS / 24L, encodeMS / 24L);

	return 0;
}

