#include "imbe_vocoder.h"

#include <cstdio>
#include <cstdint>

#include <ctime>

int16_t data1[24U][11U] = {
	{0x01, 0x5F, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09},
	{0x0D, 0x6F, 0x40, 0x40, 0x20, 0x08, 0x00, 0x04, 0x00, 0x00, 0x0B},
	{0x15, 0x7C, 0x64, 0x02, 0x00, 0x80, 0x00, 0x30, 0x00, 0x00, 0x0F},
	{0x25, 0x67, 0xC0, 0x3F, 0x14, 0x67, 0x01, 0x18, 0x6D, 0x81, 0x71},
	{0x29, 0x5F, 0xF1, 0x5A, 0x29, 0x4F, 0x02, 0x8A, 0x64, 0xE5, 0x51},
	{0x2D, 0xFB, 0xFA, 0xAB, 0x5F, 0xE5, 0x80, 0xC1, 0x00, 0xF1, 0x33},
	{0x29, 0xFF, 0x90, 0x38, 0x29, 0x98, 0x82, 0xB9, 0xD6, 0x57, 0x93},
	{0x31, 0xF6, 0xC4, 0xD4, 0xDB, 0x79, 0xC1, 0x8E, 0xDC, 0xE7, 0x9B},
	{0x32, 0x76, 0xC4, 0x8C, 0x4A, 0x44, 0xC1, 0x6C, 0x0C, 0x53, 0x39},
	{0x3A, 0xF0, 0xD8, 0xC8, 0x9F, 0x1F, 0xE0, 0x3E, 0x3B, 0xF2, 0x91},
	{0x3E, 0xD5, 0xF5, 0x43, 0x8C, 0x4B, 0xF0, 0x06, 0x52, 0xDB, 0x5B},
	{0x42, 0xD7, 0x51, 0x79, 0xC3, 0x5D, 0xF0, 0x34, 0x24, 0xFC, 0xE4},
	{0x4A, 0x72, 0x3A, 0x9C, 0xE7, 0xF6, 0xF0, 0x5A, 0x58, 0x8B, 0x7A},
	{0x52, 0x57, 0x78, 0xE2, 0xD3, 0x3B, 0xF0, 0x50, 0xB8, 0xD1, 0xB7},
	{0x5E, 0x79, 0x7E, 0xD5, 0x3D, 0x6B, 0xF0, 0x0A, 0xC7, 0x67, 0x79},
	{0x65, 0xE7, 0xEB, 0x29, 0xDF, 0xB9, 0xC0, 0x0B, 0xE2, 0xAF, 0x74},
	{0x65, 0xE7, 0x93, 0xFA, 0x6E, 0xFC, 0xC0, 0x02, 0x72, 0x7E, 0x62},
	{0x65, 0x67, 0xE6, 0x88, 0x6B, 0xB6, 0xC0, 0x1A, 0xDA, 0x65, 0x38},
	{0x69, 0x5F, 0xD3, 0x5B, 0x9F, 0x90, 0xC0, 0x1A, 0x29, 0xDE, 0x38},
	{0x69, 0x5F, 0x30, 0x74, 0xB5, 0xC6, 0xC0, 0x1D, 0x0B, 0xD7, 0xD0},
	{0x65, 0x67, 0xF8, 0x64, 0xCF, 0x22, 0x80, 0x12, 0xD2, 0x2E, 0xFF},
	{0x49, 0x21, 0xF6, 0x2D, 0x95, 0x53, 0x00, 0x39, 0xF5, 0xD9, 0x55},
	{0x31, 0x21, 0xCB, 0x7D, 0xAE, 0x7E, 0x00, 0x6A, 0x6D, 0xB0, 0xBF},
	{0x21, 0x60, 0xBC, 0xDB, 0x36, 0x3C, 0x00, 0xD8, 0x09, 0xB0, 0x0B}
};

int main()
{
	imbe_vocoder imbe;
	int16_t audio[160U];
	int16_t data2[11U];

	long decodeMS = 0L;
	long encodeMS = 0L;

	for (uint8_t i = 0U; i < 24U; i++) {
		timespec startTS;
		::clock_gettime(CLOCK_MONOTONIC, &startTS);

		imbe.imbe_decode(data1[i], audio);

		timespec decodeTS;
		::clock_gettime(CLOCK_MONOTONIC, &decodeTS);

		imbe.imbe_encode(data2, audio);

		timespec encodeTS;
		::clock_gettime(CLOCK_MONOTONIC, &encodeTS);

		if (decodeTS.tv_sec != startTS.tv_sec) {
			decodeMS += (1000000000L + decodeTS.tv_nsec - startTS.tv_nsec) / 1000000L;
		} else {
			decodeMS += (decodeTS.tv_nsec - startTS.tv_nsec) / 1000000L;
		}

		if (decodeTS.tv_sec != encodeTS.tv_sec) {
			encodeMS += (1000000000L + encodeTS.tv_nsec - decodeTS.tv_nsec) / 1000000L;
		} else {
			encodeMS += (encodeTS.tv_nsec - decodeTS.tv_nsec) / 1000000L;
		}
	}

	::printf("Decode = %ld ms, Encode=%ld ms\n", decodeMS / 24L, encodeMS / 24L);

	return 0;
}

